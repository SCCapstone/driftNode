/* Auto-generated by genmsg_cpp for file /home/viki/catkin_ws/src/wifi_tools/msg/AccessPoint.msg */
#ifndef WIFI_TOOLS_MESSAGE_ACCESSPOINT_H
#define WIFI_TOOLS_MESSAGE_ACCESSPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wifi_tools
{
template <class ContainerAllocator>
struct AccessPoint_ {
  typedef AccessPoint_<ContainerAllocator> Type;

  AccessPoint_()
  : mac_address()
  , ss(0)
  , noise(0)
  {
  }

  AccessPoint_(const ContainerAllocator& _alloc)
  : mac_address(_alloc)
  , ss(0)
  , noise(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mac_address_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mac_address;

  typedef int16_t _ss_type;
  int16_t ss;

  typedef int16_t _noise_type;
  int16_t noise;


  typedef boost::shared_ptr< ::wifi_tools::AccessPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_tools::AccessPoint_<ContainerAllocator>  const> ConstPtr;
}; // struct AccessPoint
typedef  ::wifi_tools::AccessPoint_<std::allocator<void> > AccessPoint;

typedef boost::shared_ptr< ::wifi_tools::AccessPoint> AccessPointPtr;
typedef boost::shared_ptr< ::wifi_tools::AccessPoint const> AccessPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_tools::AccessPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_tools::AccessPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_tools

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wifi_tools::AccessPoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wifi_tools::AccessPoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wifi_tools::AccessPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14566870ce27da9eaacf517d23cded21";
  }

  static const char* value(const  ::wifi_tools::AccessPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14566870ce27da9eULL;
  static const uint64_t static_value2 = 0xaacf517d23cded21ULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_tools::AccessPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_tools/AccessPoint";
  }

  static const char* value(const  ::wifi_tools::AccessPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_tools::AccessPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string mac_address # MAC address of an access point\n\
int16 ss           # signal strength [RSSI]\n\
int16 noise        # noise\n\
\n\
";
  }

  static const char* value(const  ::wifi_tools::AccessPoint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_tools::AccessPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mac_address);
    stream.next(m.ss);
    stream.next(m.noise);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AccessPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_tools::AccessPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_tools::AccessPoint_<ContainerAllocator> & v) 
  {
    s << indent << "mac_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mac_address);
    s << indent << "ss: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ss);
    s << indent << "noise: ";
    Printer<int16_t>::stream(s, indent + "  ", v.noise);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_TOOLS_MESSAGE_ACCESSPOINT_H

